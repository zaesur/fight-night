Ik heb een sample tech UI gemaakt

Links heeft elke vraag 3 knoppen, open vote, close vote, and publish.
Publish zou ook de vote moeten closen als die nog niet apart geclosed is door 'close vote'

Rechts in het grijze vak is plek voor de inkomende results. Het lijkt me handig als in de textvakken de absolute aantallen staan, en daaronder de procenten.
Absolute aantallen kan de technicus nog aanpassen wanneer nodig.
Voor een technicus is dus de workflow als er een aanpassingen nodig is: open vote > close vote > aantallen aanpassen > publish results.
Publish zou dan dus de nummer uit de textvakken moeten nemen, en niet die in het werkgeheugen staan verkregen uit mixx API.
Als er geen aanpassingen worden gedaan zijn die in de textvakken natuurlijk hetzelfde als in het werkgeheugen.

Links tussen getal nummer en voteknoppen is er ruimte voor textvakken die gebruikt kunnen worden om opties in te vullen die nog niet van tevoren vastliggen.
Vragen 13 en 14 zijn daar voorbeelden van.

Je kan er voor kiezen om het hele UI te hardcoden (dat kan ik ook best doen), dus alle vragen met aantallen opties etc er in.
Of om de DOM te populaten uit het JSON bestan met de vragen. Dat is softwaretechnisch natuurlijk 'mooier', maar in dit geval gok ik ook meer werk.
We maken software wat maar 1 ding altijd moet kunnen, geen engine die je voor een oneindig aantal vragen altijd gaat willen gebruiken.

Codematig is het denk ik niet echt netjes, veel divs in divs in divs. Identifiers (classes, id's etc) zijn vast ook niet consequent.

Opmaak is nu erg lelijk, de kleuren zijn wel handig voor de css instellen.