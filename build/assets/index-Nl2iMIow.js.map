{"version":3,"file":"index-Nl2iMIow.js","sources":["../../src/client.ts","../../src/utils.ts","../../src/app.ts","../../www/index.html?html-proxy&index=0.js"],"sourcesContent":["export default class Client {\n  #baseUrl: URL;\n\n  constructor(baseUrl: string | URL) {\n    this.#baseUrl = new URL(baseUrl);\n  }\n\n  #getUrl = (path: string | URL) => new URL(path, this.#baseUrl);\n\n  getState = () =>\n    fetch(this.#getUrl(\"api/state\"), {\n      method: \"GET\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Accept: \"*/*\",\n      },\n    });\n\n  startHardware = (min: number, max: number) =>\n    fetch(this.#getUrl(\"api/hardware/start\"), {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Accept: \"application/json\",\n      },\n      body: JSON.stringify({\n        keyPadMin: min,\n        keyPadMax: max,\n      }),\n    });\n\n  stopHardware = () =>\n    fetch(this.#getUrl(\"api/hardware/stop\"), {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Accept: \"application/json\",\n      },\n    });\n\n  startQuestion = (answersCount: number) =>\n    fetch(this.#getUrl(\"api/question/start\"), {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Accept: \"application/json\",\n      },\n      body: JSON.stringify({\n        items: answersCount,\n      }),\n    });\n\n  stopQuestion = () =>\n    fetch(this.#getUrl(\"api/question/stop\"), {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Accept: \"application/json\",\n      },\n    });\n\n  getResults = () =>\n    fetch(this.#getUrl(\"api/question/results\"), {\n      method: \"GET\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Accept: \"application/json\",\n      },\n    });\n}\n","type BucketRecord = Record<number, Array<number>>;\ntype StatisticRecord = Record<\n  number,\n  { keypadIds: Array<number>; count: number; percentage: number }\n>;\n\nexport const getStatistics = (votes: Array<Vote>): StatisticRecord => {\n  // First, sort all votes into buckets (no vote => -1)\n  const buckets = votes.reduce<BucketRecord>(\n    (acc, { keypadId, options: [vote = -1] }) => {\n      if (acc?.[vote]) {\n        acc[vote].push(keypadId);\n      } else {\n        acc[vote] = [keypadId];\n      }\n\n      return acc;\n    },\n    {}\n  );\n\n  // Second, calculate the share of the total vote count\n  const statistics = Object.entries(buckets).reduce<StatisticRecord>(\n    (acc, [vote, keypadIds]) => ({\n      ...acc,\n      [vote]: {\n        keypadIds,\n        count: keypadIds.length,\n        percentage: (keypadIds.length / votes.length) * 100,\n      },\n    }),\n    {}\n  );\n\n  return statistics;\n};\n","import Client from \"./client.ts\";\nimport { apiUrl, key } from \"../config.json\";\nimport { getStatistics } from \"./utils.ts\";\n\nexport default class App {\n  #client;\n  id;\n  count;\n  render;\n\n  systemIsActive = false;\n  questionIsActive = false;\n\n  constructor(render) {\n    this.#client = new Client(apiUrl);\n\n    this.id = 1;\n    this.count = 10;\n    this.render = render.bind(this);\n\n    this.initialize();\n  }\n\n  initialize = async () => {\n    await this.getState();\n\n    if (!this.systemIsActive) {\n      await this.#client.startHardware(0, this.count);\n    }\n\n    this.render();\n  };\n\n  getState = async () => {\n    const response = await this.#client.getState();\n\n    if (response.ok) {\n      const json = await response.json();\n\n      this.systemIsActive = Boolean(json.result[\"hardware_state\"]);\n      this.questionIsActive = Boolean(json.result[\"active_question\"]);\n    }\n  };\n\n  startQuestion = async (count) => {\n    const response = await this.#client.startQuestion(count);\n  };\n\n  getResults = async () => {\n    const response = await this.#client.getResults();\n\n    if (response.ok) {\n      const json = await response.json();\n      const statistics = getStatistics(json.result);\n\n      console.log(statistics);\n    }\n  };\n\n  showResults = async () => {\n    const response = await this.#client.stopQuestion();\n\n    if (response.ok) {\n      const json = await response.json();\n      console.log(json);\n    }\n  };\n\n  loadLocalStorage = () => {\n    const state = localStorage.getItem(key);\n\n    if (state) {\n      this.systemIsActive = JSON.parse(state).systemIsActive;\n      this.questionIsActive = JSON.parse(state).questionIsActive;\n    }\n  };\n\n  saveLocalStorage = () => {\n    localStorage.setItem(\n      key,\n      JSON.stringify({\n        systemIsActive: this.systemIsActive,\n        questionIsActive: this.questionIsActive,\n      })\n    );\n  };\n\n  resetLocalStorage = () => {\n    localStorage.removeItem(key);\n  };\n}\n","\n    import App from \"../src/app.ts\";\n\n    const app = new App(render);\n\n    const openButton = document.getElementById(\"open\");\n    const showButton = document.getElementById(\"show\");\n\n    let interval;\n\n    openButton.addEventListener(\"click\", () => {\n      openButton.disabled = true;\n      showButton.disabled = false;\n\n      interval = setInterval(() => {\n        app.getResults();\n      }, 1000);\n    });\n\n    showButton.addEventListener(\"click\", () => {\n      openButton.disabled = false;\n      showButton.disabled = true;\n\n      window.clearInterval(interval);\n    });\n\n    function render() {\n      // 'this' is bound to the app\n      const app = this;\n\n      console.log(app.count);\n    }\n\n    window.app = app;\n  "],"names":["render","app"],"mappings":"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"}